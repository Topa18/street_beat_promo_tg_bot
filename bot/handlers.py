from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import hlink, hbold

from bot.config import TG_ID
from bot import keyboards as kbs
from bot.states import Output
from scrapper.headers import HEADERS
from scrapper.discount_parser import get_data, post_process_data


router = Router()


async def include_notification(dp, bot):

    @router.message(CommandStart())
    async def cmd_start(message: Message, state: FSMContext = None):
        if state:
            if state:
                await state.clear()

        # –ü—Å–µ–≤–¥–æ—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–æ–º
        await bot.send_message(chat_id=TG_ID,
                               text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —á—Ç–æ –Ω–∞—á–∞–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—è!")
        
        await message.answer(text=f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {message.from_user.first_name}!\n"
                                "–î–ª—è –∫–æ–≥–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –∫—Ä–æ—Å—Å–æ–≤–∫–∏?",
                             reply_markup=kbs.gender_kb)


@router.message(F.text == '–°–±—Ä–æ—Å–∏—Ç—å üîô')
async def canceled(message: Message, state: FSMContext = None):
    if state:
        await state.clear()

    await message.answer(text='–ù–∞–¥–µ—é—Å—å —è —Å–º–æ–≥ –ø–æ–º–æ—á—å!',
                         reply_markup=kbs.gender_kb)


@router.message(F.text.startswith('–ò—â–µ–º'))
async def get_man_sneakers(message: Message, state: FSMContext):
    required_gender = message.text.split(' ')
    if required_gender[-2] == '–º—É–∂—Å–∫–∏–µ': 
        await message.answer(text="–ò—â—É –≤—Å–µ –º—É–∂—Å–∫–∏–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏ —Å–æ —Å–∫–∏–¥–∫–∞–º–∏\n"\
                                  "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π ü§î\n"\
                                  "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ–∫–æ–ª–æ –º–∏–Ω—É—Ç—ã...",
                             reply_markup=ReplyKeyboardRemove())
        
        data = get_data(headers=HEADERS, gender='man')
        proceced_data = post_process_data(data)
   
    if required_gender[-2] == '–∂–µ–Ω—Å–∫–∏–µ': 
        await message.answer(text="–ò—â—É –≤—Å–µ –∂–µ–Ω—Å–∫–∏–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏ —Å–æ —Å–∫–∏–¥–∫–∞–º–∏\n"\
                                  "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π ü§î\n"\
                                  "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ–∫–æ–ª–æ –º–∏–Ω—É—Ç—ã...",
                             reply_markup=ReplyKeyboardRemove())
        
        data = get_data(headers=HEADERS, gender='woman')
        proceced_data = post_process_data(data)
    
    await state.update_data(stack=0)
    await state.update_data(sneakers_data=proceced_data)
    await state.set_state(Output.stack)

    await message.answer(text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ!\n"\
                              f"–Ø –Ω–∞—à–µ–ª {len(data)} –ø–æ–∑–∏—Ü–∏–π —Å–æ —Å–∫–∏–¥–∫–∞–º–∏ üî•\n"\
                              "–î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º —á—Ç–æ —Ç–∞–º?\n"\
                              "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, –∏ —è –ø–æ–∫–∞–∂—É –ø–µ—Ä–≤—ã–µ 5 –ø–æ–∑–∏—Ü–∏–π",
                         reply_markup=kbs.output_kb)
    

@router.message(Output.stack)
async def researching_sales(message: Message, state: FSMContext):
    state_data = await state.get_data()
    current_stack_index = state_data.get('stack')
    data = state_data.get('sneakers_data')

    for item in data[current_stack_index]:
        card = f"{hlink(title=item.get('model'), url=item.get('url'))}\n"\
               f"{hbold('–ë—Ä–µ–Ω–¥: ')}{(item.get('brand'))}\n"\
               f"{hbold('–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: ')}{(item.get('old_price'))}\n"\
               f"üî•{hbold('–¶–µ–Ω–∞ –ø–æ —Å–∫–∏–¥–∫–µ: ')}{item.get('new_price')}üî•\n"\
               f"{hbold(item.get('type'))}\n"\
               f"{hbold('–¶–≤–µ—Ç: ')}{item.get('color')}\n"\
               f"{hbold('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: ')}{item.get('sizes')}"
    
        await message.answer(text=card, reply_markup=kbs.output_kb)

    next_stack_index = int(current_stack_index) + 1
    await state.update_data(stack=next_stack_index)

    if next_stack_index == len(data):
        await state.clear()
        await message.answer('–≠—Ç–æ –≤—Å–µ!',
                             reply_markup=ReplyKeyboardRemove())
        
